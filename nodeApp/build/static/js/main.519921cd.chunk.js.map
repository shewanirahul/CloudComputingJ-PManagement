{"version":3,"sources":["component/search.js","component/orderParts.js","component/login.js","component/afterlogin.js","component/bookSuccess.js","component/bookFailure.js","component/WelcomeHeader.js","App.js","serviceWorker.js","index.js"],"names":["search","props","state","jobs","fetch","then","res","json","result","setState","console","log","error","this","length","Table","striped","bordered","hover","renderJobs","index","localStorage","setItem","jobName","history","push","map","parts","Button","variant","onClick","orderJob","refs","job","value","filter","item","jobInfo","method","headers","body","JSON","stringify","r","window","location","reload","Fragment","className","type","ref","placeholder","aria-label","filterJobs","reset","renderTable","Component","orderParts","constructFinalArray","bind","jobDetails","tableData","partDetails","JobID","getItem","jobID","url","finalArray","axios","get","data","forEach","element","url2","partId","result2","finalObject","qoh","partName","qty","id","removeItem","BreakException","failure","e","size","disabled","isQuantityValid","sendToLogin","ApplyExit","username","password","fields","errors","handleChange","loginForm","fetchAPI","target","name","preventDefault","validateForm","getSelection","toString","response","uerId","alert","formIsValid","Container","Form","onSubmit","onChange","afterlogin","userID","jobDetailsArr","parse","userId","partsToBook","status","printUser","React","bookSuccess","bookFailure","href","WelcomeHeader","Jumbotron","fluid","App","exact","path","component","login","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.519921cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport \"../App.css\";\r\n\r\nclass search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jobs: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"http://129.173.67.163:1337/getJobsParts\";\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            jobs: result,\r\n          });\r\n          console.log(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  renderTable() {\r\n    const { jobs } = this.state;\r\n    console.log(jobs);\r\n    if (jobs.length > 0) {\r\n      return (\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Job</th>\r\n              <th>Parts</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.renderJobs()}</tbody>\r\n        </Table>\r\n      );\r\n    } else {\r\n      return <div>No Jobs</div>;\r\n    }\r\n  }\r\n\r\n  orderJob(index) {\r\n    console.log(index);\r\n    localStorage.setItem(\"jobID\", index.jobName);\r\n    console.log(\"jobID : \" + index.jobName);\r\n    this.props.history.push(\"/orderParts\");\r\n  }\r\n  renderJobs() {\r\n    const { jobs } = this.state;\r\n    if (jobs.length > 0) {\r\n      return jobs.map((index) => (\r\n        <>\r\n          <tr>\r\n            <td>{index.jobName}</td>\r\n            <td>{index.parts}</td>\r\n            <td>\r\n              <Button variant=\"dark\" onClick={() => this.orderJob(index)}>\r\n                Get Job\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        </>\r\n      ));\r\n    } else {\r\n      return <div>No jobs</div>;\r\n    }\r\n  }\r\n\r\n  filterJobs() {\r\n    console.log(this.refs.job.value);\r\n    this.setState({\r\n      jobs: this.state.jobs.filter(\r\n        (item) => item.jobName === this.refs.job.value\r\n      ),\r\n    });\r\n    let jobInfo = {\r\n      jobName: this.refs.job.value,\r\n    };\r\n    fetch(\r\n      \"http://cloud6a-env.eba-t7ffpjmv.us-east-1.elasticbeanstalk.com/companyz/insertSearch\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(jobInfo),\r\n      }\r\n    )\r\n      .then((r) => r.json())\r\n      .then((res) => {\r\n        if (res) {\r\n          console.log(\"search logged successfully\");\r\n        }\r\n      });\r\n  }\r\n\r\n  reset() {\r\n    window.location.reload();\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"inner\">\r\n          <h2>Jobs</h2>\r\n          <br />\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            ref=\"job\"\r\n            placeholder=\"Enter Job Name\"\r\n            aria-label=\"Search\"\r\n          />{\" \"}\r\n          {\"    \"}\r\n          <Button\r\n            variant=\"dark\"\r\n            type=\"submit\"\r\n            onClick={() => this.filterJobs()}\r\n          >\r\n            Search\r\n          </Button>\r\n          {\"    \"}\r\n          <Button variant=\"dark\" onClick={() => this.reset()}>\r\n            Reset\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          {this.renderTable()}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default search;\r\n","import React, { Component } from 'react';\r\nimport {Table, Button} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nexport default class orderParts extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.constructFinalArray = this.constructFinalArray.bind(this)\r\n\r\n        this.state = {\r\n            jobDetails: [],\r\n            tableData: [],\r\n            partDetails: [],\r\n            jobs: [],\r\n            JobID: localStorage.getItem('jobID')\r\n        }\r\n}\r\n\r\nconstructFinalArray(jobID){\r\n\r\n  //console.log(\"jobID: \" + jobID)\r\n  const url = \"http://129.173.67.163:1337/getJobsById/\" + jobID;\r\n  var finalArray = [];\r\n  \r\n  axios.get(url)\r\n   .then(\r\n     (result) => {\r\n       //console.log(result.data)\r\n       result.data.forEach(element => {\r\n         //console.log(\"partID: \" + element.partId)\r\n         const url2 = 'http://129.173.67.174:1337/getPartsById/' + element.partId;\r\n         axios.get(url2)\r\n           .then(\r\n             (result2) => {\r\n               //console.log(result2);\r\n               var finalObject = {}\r\n               finalObject.qoh = result2.data[0].qoh;\r\n               finalObject.partName = result2.data[0].partName;\r\n               finalObject.partId = element.partId;\r\n               finalObject.qty = element.qty;\r\n               finalObject.id = element.id;\r\n\r\n               finalArray.push(finalObject);\r\n\r\n               this.setState({\r\n                tableData: finalArray\r\n              });          \r\n             },\r\n             (error) => {\r\n               console.log(error);\r\n             }\r\n           );\r\n       }\r\n       );\r\n       console.log(finalArray);\r\n     },\r\n     (error) => {\r\n       console.log(error)\r\n     }\r\n   );\r\n  }\r\n\r\ncomponentDidMount(){\r\n  //alert('Fetching Job details!');\r\n\r\n  this.constructFinalArray(this.state.JobID);\r\n}\r\n\r\n renderTable() {\r\n   console.log(this.state.tableData)\r\n   if(!this.state.tableData){\r\n      return null;\r\n   }\r\n    return (\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Job ID</th>\r\n            <th>Part ID</th>\r\n            <th>Part Name</th>\r\n            <th>Required Quantity</th>\r\n            <th>Available Quantity</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{this.renderJobs()}</tbody>\r\n      </Table>\r\n    );\r\n}\r\n\r\nsendToLogin(){\r\n  localStorage.setItem('jobDetails',JSON.stringify(this.state.tableData))\r\n  localStorage.removeItem(\"logInResults\");\r\n  this.props.history.push('/login')\r\n}\r\n  \r\nisQuantityValid(){\r\n  var BreakException= {};\r\n\r\n  let {tableData} = this.state;\r\n  if(!tableData)\r\n    return true;\r\n  \r\n    var failure = false;\r\n\r\n    try{\r\n      tableData.forEach(element => {\r\n        // console.log('QTY: ' + element.qty)\r\n        // console.log('QOH: ' + element.qoh)\r\n        \r\n            if(element.qoh < element.qty){\r\n            //  console.log(\"Returning true\")\r\n              throw BreakException;\r\n            }\r\n          });\r\n    } catch(e){\r\n      failure = true;\r\n    }\r\n  console.log(\"Returning \" + failure)\r\n  return failure;\r\n}\r\n\r\n renderJobs() {\r\n   \r\n  const { tableData } = this.state;\r\n  console.log(tableData);\r\n    return tableData.map((index) => (\r\n      <>\r\n        <tr>\r\n          <td>{index.id}</td>\r\n          <td>{index.partId}</td>\r\n          <td>{index.partName}</td>\r\n          <td>{index.qty}</td>\r\n          <td>{index.qoh}</td>\r\n        </tr>\r\n      </>\r\n    ));\r\n}\r\n\r\n    render() {\r\n        return (<React.Fragment>\r\n          <div className=\"inner\">\r\n            <h1>Job Details</h1>\r\n            <br />\r\n            <br />\r\n            {this.renderTable()}\r\n            <br />\r\n            <br />\r\n            <Button size=\"sm\" variant=\"dark\" disabled={this.isQuantityValid()} type=\"submit\" onClick={() => this.sendToLogin()}>\r\n            Login to Confirm order\r\n            </Button>\r\n          </div>\r\n        </React.Fragment>);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Form, Container } from \"react-bootstrap\";\r\nimport \"./login.css\";\r\n\r\nexport default class ApplyExit extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      fields: {},\r\n      errors: {},\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.loginForm = this.loginForm.bind(this);\r\n    this.fetchAPI = this.fetchAPI.bind(this);\r\n  }\r\n  handleChange(e) {\r\n    let fields = this.state.fields;\r\n    fields[e.target.name] = e.target.value;\r\n    this.setState({\r\n      fields,\r\n    });\r\n  }\r\n  loginForm(e) {\r\n    e.preventDefault();\r\n    if (this.validateForm()) {\r\n      console.log(\"fields\" + this.refs.username.value);\r\n\r\n      let fields = {};\r\n      fields[\"username\"] = \"\";\r\n      fields[\"password\"] = \"\";\r\n      this.setState({ fields: fields });\r\n\r\n      console.log(window.getSelection().toString());\r\n\r\n      this.fetchAPI(this.refs.username.value, this.refs.password.value);\r\n    }\r\n  }\r\n\r\n  fetchAPI(username, password) {\r\n    // param is a highlighted word from the user before it clicked the button\r\n    console.log(\"Username\" + username);\r\n    console.log(\"Username\" + password);\r\n    fetch(\r\n      `http://cloud6a-env.eba-t7ffpjmv.us-east-1.elasticbeanstalk.com/companyz/users/${username}/${password}`\r\n    )\r\n      .then((r) => r.json())\r\n      .then((response) => {\r\n        console.log(\"Line 12\" + response.uerId);\r\n        if (!response.uerId) {\r\n          console.log(\"Failure\");\r\n          localStorage.setItem(\"logInResults\", \"failure\");\r\n          alert(\"Invalid Credentials\");\r\n        } else {\r\n          console.log(\"TResult of response   \" + response.uerId);\r\n\r\n          localStorage.setItem(\"user\", response.uerId);\r\n          this.props.history.push(\"/afterLogin\");\r\n        }\r\n      });\r\n  }\r\n\r\n  validateForm() {\r\n    let fields = this.state.fields;\r\n    let errors = {};\r\n    let formIsValid = true;\r\n    //Password\r\n    if (!fields[\"password\"]) {\r\n      formIsValid = false;\r\n      errors[\"password\"] = \"password cannot be empty\";\r\n    }\r\n    if (!fields[\"username\"]) {\r\n      formIsValid = false;\r\n      errors[\"username\"] = \"username cannot be empty\";\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors,\r\n    });\r\n    return formIsValid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Container className=\"login\">\r\n          <Form className=\"loginForm\">\r\n            <br></br>\r\n            <h1>Login</h1>\r\n            <br></br>\r\n            <form method=\"post\" name=\"loginForm\" onSubmit={this.loginForm}>\r\n              <table>\r\n                {\" \"}\r\n                <tr>\r\n                  <td>\r\n                    {\" \"}\r\n                    <label>Username</label>{\" \"}\r\n                  </td>\r\n                  <td>\r\n                    {\" \"}\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      ref=\"username\"\r\n                      onChange={this.handleChange}\r\n                      placeholder=\"Enter your username\"\r\n                    />\r\n                    <div className=\"errorMsg\">{this.state.errors.username}</div>\r\n                  </td>\r\n                </tr>\r\n                <br></br>\r\n                <tr>\r\n                  {\" \"}\r\n                  <td>\r\n                    {\" \"}\r\n                    <label>Password</label>\r\n                  </td>\r\n                  <td>\r\n                    {\" \"}\r\n                    <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      ref=\"password\"\r\n                      onChange={this.handleChange}\r\n                      placeholder=\"Enter your password\"\r\n                    />\r\n                    <div className=\"errorMsg\">{this.state.errors.password}</div>\r\n                  </td>\r\n                </tr>\r\n                <br></br>\r\n                <tr>\r\n                  {\" \"}\r\n                  <input\r\n                    type=\"submit\"\r\n                    className=\"btn btn-success \"\r\n                    value=\"Login\"\r\n                  />\r\n                </tr>{\" \"}\r\n              </table>\r\n            </form>\r\n          </Form>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport class afterlogin extends React.Component {\r\n  printUser() {\r\n    console.log(\"Called print user\");\r\n    let userID = localStorage.getItem(\"user\");\r\n\r\n    var jobDetailsArr = JSON.parse(localStorage.getItem(\"jobDetails\"));\r\n\r\n    console.log(\"Job Details Array: \" + jobDetailsArr);\r\n    console.log(\"User name-->\" + userID);\r\n\r\n    var json = {};\r\n    json.userId = userID;\r\n    json.partsToBook = jobDetailsArr;\r\n\r\n    console.log(json);\r\n\r\n    fetch(\r\n      \"http://cloud6a-env.eba-t7ffpjmv.us-east-1.elasticbeanstalk.com/companyz/book\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(json),\r\n      }\r\n    ).then((res) => {\r\n      if (res) {\r\n        if (res.status == 200) {\r\n          this.props.history.push(\"/bookSuccess\");\r\n        } else {\r\n          this.props.history.push(\"/bookFailure\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Successfully Logged In</h3>\r\n        <p>Do you want to confirm Order?</p>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"dark\"\r\n          type=\"submit\"\r\n          onClick={() => this.printUser()}\r\n        >\r\n          Confirm booking\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default afterlogin;\r\n","import React from \"react\";\r\n\r\nexport class bookSuccess extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h3>Successfully Booked your Job order</h3>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default bookSuccess;","import React from \"react\";\r\n\r\nexport class bookFailure extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h3>Your Job Order cannot be completed since you have already ordered it before!!\r\n                    Try ordering other Jobs \r\n                </h3>\r\n                <a href=\"/\">Home</a>\r\n                <br></br>\r\n                <br></br>\r\n                <br></br>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default bookFailure;","import React from \"react\";\r\nimport { Jumbotron, Container } from \"react-bootstrap\";\r\nimport \"./WelcomeHeader.css\";\r\n\r\nexport const WelcomeHeader = () => (\r\n  <Jumbotron fluid className=\"jumbo\">\r\n    <Container>\r\n      <div className=\"welcomeDiv\">\r\n        <p className=\"welcomeP\">Welcome to CompanyZ!</p>\r\n      </div>\r\n    </Container>\r\n  </Jumbotron>\r\n);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport search from \"./component/search\";\r\nimport orderParts from \"./component/orderParts\";\r\nimport login from \"./component/login\";\r\nimport afterlogin from \"./component/afterlogin\";\r\nimport bookSuccess from \"./component/bookSuccess\";\r\nimport bookFailure from \"./component/bookFailure\";\r\nimport { WelcomeHeader } from \"./component/WelcomeHeader.js\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <WelcomeHeader />\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={search} />\r\n          <Route exact path=\"/login\" component={login} />\r\n          <Route exact path=\"/orderParts\" component={orderParts} />\r\n          <Route exact path=\"/afterlogin\" component={afterlogin} />\r\n          <Route exact path=\"/bookSuccess\" component={bookSuccess} />\r\n          <Route exact path=\"/bookFailure\" component={bookFailure} />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}